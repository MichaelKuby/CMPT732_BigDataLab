1. What happened when you inserted another row with the same primary key as an existing row?

When we use INSERT INTO to insert a row with the same primary key as an existing row, we effectively overwite the data existing in the original row:

cqlsh:mjk30> SELECT * FROM test;

 id | data
----+----------
  5 |     cinq
  1 |  initial
  2 |   double
  4 |   square
  3 | tertiary

(5 rows)
cqlsh:mjk30> INSERT INTO test (id, data) VALUES (5, 'cinqo');
cqlsh:mjk30> SELECT * FROM test;

 id | data
----+----------
  5 |    cinqo
  1 |  initial
  2 |   double
  4 |   square
  3 | tertiary


2. What happened when you query a keyspace with replication factor 1 and one node down? How did it behave with replication factor 2 and a node down?

With one node down:

When selecting data from the table based on the ID, some queries worked while others didn't. Since the replication factor was 1, data that was stored on 
the node that was down was unretreivable:

cqlsh:mjk30> SELECT data FROM test WHERE id=1;
NoHostAvailable: ('Unable to complete the operation against any hosts', {<Host: 10.17.203.201:9042 datacenter1>: Unavailable('Error from server: code=1000 [Unavailable exception] message="Cannot achieve consistency level ONE" info={\'consistency\': \'ONE\', \'required_replicas\': 1, \'alive_replicas\': 0}')})

While the node was down, I changed the replication factor to 2, and tried again to retrieve the records where id=1, and this still failed:

cqlsh:mjk30> ALTER KEYSPACE mjk30 WITH REPLICATION = { 'class': 'SimpleStrategy', 'replication_factor': 2 };
ConfigurationException: Cannot alter RF while some endpoints are not in normal state (no range movements): [/10.17.203.203:7000]
cqlsh:mjk30> SELECT data FROM test WHERE id=1;
NoHostAvailable: ('Unable to complete the operation against any hosts', {<Host: 10.17.203.201:9042 datacenter1>: Unavailable('Error from server: code=1000 [Unavailable exception] message="Cannot achieve consistency level ONE" info={\'consistency\': \'ONE\', \'required_replicas\': 1, \'alive_replicas\': 0}')})

What this suggests is that changing the replication factor only goes into effect when we can achieve full consistency.

Once the replication factor = 2 was able to be set, and with a node down, all records were retrievable.

3. How did the consistency level affect the results with the node up/down?

With consistency ONE, all queries will work. We are able to retrieve any and all data without issue, since there is at least one node up for all 
records in the database to retreieve the queried data.

With Consistency ALL, some queries will work while others won't. Only queries where all references to a record are available and can be retrieved will 
return a result.

4. Which of the WHERE id=? values returned successfully with CONSISTENCY ALL when one of the nodes was down? Why do you think some could be returned but 
not others?

Unavailable: 1, 5, 8.
Available: 2, 3, 4, 6, 7, 9

Notably, and not surprisingly, 1/3 of the data is unavailable and 2/3 is. Since 1/3 nodes are down and 2/3 are up, this makes sense.

With CONSISTENCY ALL and the node down, some data is retrievable and other data is not. The data that is retreivable is replicated on nodes that happen 
to be up (not stored on the node that is down). The data that is irretrievable is data that is replicated on the node that is down. Specifically, one 
node will be up where this data is stored, but since we have set consistency to ALL, and cannot confirm these values on replicated nodes, this fails. 

5. What was the CREATE TABLE statement you used for the nasalogs table? What was the primary key you choose, and why?

CREATE TABLE nasalogs ( host TEXT, datetime TIMESTAMP, path TEXT, bytes INT, id UUID, PRIMARY KEY (host, id) );

The primary key I chose was (host, id). I chose this tuple because we know that the first element of the primary key is what dictates the partitioning 
scheme, and since our queries will generally be done by host, we want the partitioning scheme to accomodate this. Secondly I chose id, based on UUID, 
because this makes the tuple (and thus the primary key) unique.

6. What was the CQL query you used (or tried) to get the total number of bytes?

SELECT SUM(bytes) FROM nasalogs;
